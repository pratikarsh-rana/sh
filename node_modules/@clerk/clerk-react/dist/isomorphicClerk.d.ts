import type { BrowserClerk, BrowserClerkConstructor, ClerkOptions } from './types';
import type { ClientResource, EnvironmentResource, Resources, SessionResource, SignInProps, SignOutCallback, SignUpProps, UserButtonProps, UserProfileProps, UserResource } from '@clerk/types';
export default class IsomorphicClerk {
    private mode;
    private frontendApi;
    private options;
    private ClerkConstructor;
    private clerkjs;
    private preopenSignIn?;
    private preopenSignUp?;
    private premountSignInNodes;
    private premountSignUpNodes;
    private premountUserProfileNodes;
    private premountUserButtonNodes;
    private premountMethodCalls;
    private _loaded;
    ssrData: string | null;
    ssrClient?: ClientResource;
    ssrSession?: SessionResource | null;
    constructor(frontendApi: string, options: ClerkOptions | undefined, Clerk: BrowserClerkConstructor | undefined | null);
    loadClerkJS(): Promise<void | BrowserClerk>;
    throwError(errorMsg: string): Promise<void>;
    private hydrateClerkJS;
    get client(): ClientResource | undefined;
    get session(): SessionResource | undefined | null;
    get user(): UserResource | undefined | null;
    get environment(): EnvironmentResource | undefined | null;
    setSession: (session: SessionResource | string | null, beforeEmit?: ((session: SessionResource | null) => void | Promise<any>) | undefined) => Promise<void>;
    openSignIn: (props?: SignInProps | undefined) => void;
    closeSignIn: () => void;
    openSignUp: (props?: SignUpProps | undefined) => void;
    closeSignUp: () => void;
    mountSignIn: (node: HTMLDivElement, props: SignInProps) => void;
    unmountSignIn: (node: HTMLDivElement) => void;
    mountSignUp: (node: HTMLDivElement, props: SignUpProps) => void;
    unmountSignUp: (node: HTMLDivElement) => void;
    mountUserProfile: (node: HTMLDivElement, props: UserProfileProps) => void;
    unmountUserProfile: (node: HTMLDivElement) => void;
    mountUserButton: (node: HTMLDivElement, props: UserButtonProps) => void;
    unmountUserButton: (node: HTMLDivElement) => void;
    addListener: (listener: (emission: Resources) => void) => void;
    loadFromServer: (token: string) => void;
    navigate: (to: string) => void;
    redirectToSignIn: () => void;
    redirectToSignUp: () => void;
    redirectToUserProfile: () => void;
    signOut: (signOutCallback?: SignOutCallback | undefined) => Promise<void>;
    signOutOne: (signOutCallback?: SignOutCallback | undefined) => Promise<void>;
}
