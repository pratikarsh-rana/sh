'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = require('react');
var React__default = _interopDefault(React);

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  subClass.__proto__ = superClass;
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function inBrowser() {
  return typeof window !== 'undefined';
}

var version = "1.16.1";

var FAILED_TO_LOAD_ERROR = 'Clerk: Failed to load Clerk';
var MISSING_PROVIDER_ERROR = 'Clerk: Missing provider';
var MISSING_BODY_ERROR = 'Clerk: Missing <body> element.';

function isStaging(frontendApi) {
  return frontendApi.endsWith('.lclstage.dev') || frontendApi.endsWith('.stgstage.dev') || frontendApi.endsWith('.clerkstage.dev');
}

function getScriptSrc(frontendApi, localScriptSrc) {
  if (localScriptSrc) {
    return localScriptSrc;
  }

  var majorVersion = isStaging(frontendApi) ? 'staging' : parseInt(version.split('.')[0], 10);
  return "https://" + frontendApi + "/npm/@clerk/clerk-js@" + majorVersion + "/dist/clerk.browser.js";
}

function loadScript(frontendApi, localScriptSrc) {
  return new Promise(function (resolve, reject) {
    if (window.Clerk) {
      resolve(null);
    }

    if (!frontendApi) {
      reject(MISSING_PROVIDER_ERROR);
    }

    var script = document.createElement('script');
    var src = getScriptSrc(frontendApi, localScriptSrc);
    script.setAttribute('data-clerk-frontend-api', frontendApi);
    script.setAttribute('crossorigin', 'anonymous');
    script.async = true;

    if (!document.body) {
      reject(MISSING_BODY_ERROR);
    }

    script.addEventListener('load', function () {
      return resolve(script);
    });
    script.addEventListener('error', function () {
      return reject(FAILED_TO_LOAD_ERROR);
    });
    script.src = src;
    document.body.appendChild(script);
  });
}

var counts = /*#__PURE__*/new Map();
function useMaxAllowedInstancesGuard(name, error, maxCount) {
  if (maxCount === void 0) {
    maxCount = 1;
  }

  React__default.useEffect(function () {
    var count = counts.get(name) || 0;

    if (count == maxCount) {
      throw new Error(error);
    }

    counts.set(name, count + 1);
    return function () {
      counts.set(name, (counts.get(name) || 1) - 1);
    };
  }, []);
}
function withMaxAllowedInstancesGuard(WrappedComponent, name, error) {
  var displayName = WrappedComponent.displayName || WrappedComponent.name || name || 'Component';

  var Hoc = function Hoc(props) {
    useMaxAllowedInstancesGuard(name, error);
    return React__default.createElement(WrappedComponent, Object.assign({}, props));
  };

  Hoc.displayName = "withMaxAllowedInstancesGuard(" + displayName + ")";
  return Hoc;
}

var noFrontendApiError = 'Clerk: You must add the frontendApi prop to your <ClerkProvider>';
var noClerkProviderError = 'Clerk: You must wrap your application in a <ClerkProvider> component.';
var noGuaranteedLoadedError = function noGuaranteedLoadedError(hookName) {
  return "Clerk: You're calling " + hookName + " before there's a guarantee the client has been loaded. Call " + hookName + " from a child of <SignedIn>, <SignedOut>, or <ClerkLoaded>, or use the withClerk() HOC.";
};
var noGuaranteedUserError = function noGuaranteedUserError(hookName) {
  return "Clerk: You're calling " + hookName + " before there's a guarantee there's an active user. Call " + hookName + " from a child of <SignedIn> or use the withUser() HOC.";
};
var multipleClerkProvidersError = "Clerk: You've added multiple <ClerkProvider> components in your React component tree. Wrap your components in a single <ClerkProvider>.";
var hocChildrenNotAFunctionError = 'Clerk: Child of WithClerk must be a function.';

var IsomorphicClerk = /*#__PURE__*/function () {
  function IsomorphicClerk(frontendApi, options, Clerk) {
    var _this2 = this;

    var _this = this,
        _this3 = this,
        _this4 = this;

    if (options === void 0) {
      options = {};
    }

    this.clerkjs = null;
    this.preopenSignIn = null;
    this.preopenSignUp = null;
    this.premountSignInNodes = new Map();
    this.premountSignUpNodes = new Map();
    this.premountUserProfileNodes = new Map();
    this.premountUserButtonNodes = new Map();
    this.premountMethodCalls = new Map();
    this._loaded = false;
    this.ssrData = null;

    this.hydrateClerkJS = function (clerkjs) {
      try {
        if (!clerkjs) {
          throw new Error('Failed to hydrate latest Clerk JS');
        }

        _this.clerkjs = clerkjs;

        _this.premountMethodCalls.forEach(function (cb) {
          return cb();
        });

        if (_this.preopenSignIn !== null) {
          clerkjs.openSignIn(_this.preopenSignIn);
        }

        if (_this.preopenSignUp !== null) {
          clerkjs.openSignUp(_this.preopenSignUp);
        }

        _this.premountSignInNodes.forEach(function (props, node) {
          clerkjs.mountSignIn(node, props);
        });

        _this.premountSignUpNodes.forEach(function (props, node) {
          clerkjs.mountSignUp(node, props);
        });

        _this.premountUserProfileNodes.forEach(function (props, node) {
          clerkjs.mountUserProfile(node, props);
        });

        _this.premountUserButtonNodes.forEach(function (props, node) {
          clerkjs.mountUserButton(node, props);
        });

        _this._loaded = true;
        return Promise.resolve(_this.clerkjs);
      } catch (e) {
        return Promise.reject(e);
      }
    };

    this.setSession = function (session, beforeEmit) {
      if (_this2.clerkjs) {
        return _this2.clerkjs.setSession(session, beforeEmit);
      } else {
        return Promise.reject();
      }
    };

    this.openSignIn = function (props) {
      if (_this2.clerkjs && _this2._loaded) {
        _this2.clerkjs.openSignIn(props);
      } else {
        _this2.preopenSignIn = props;
      }
    };

    this.closeSignIn = function () {
      if (_this2.clerkjs && _this2._loaded) {
        _this2.clerkjs.closeSignIn();
      } else {
        _this2.preopenSignIn = null;
      }
    };

    this.openSignUp = function (props) {
      if (_this2.clerkjs && _this2._loaded) {
        _this2.clerkjs.openSignUp(props);
      } else {
        _this2.preopenSignUp = props;
      }
    };

    this.closeSignUp = function () {
      if (_this2.clerkjs && _this2._loaded) {
        _this2.clerkjs.closeSignUp();
      } else {
        _this2.preopenSignUp = null;
      }
    };

    this.mountSignIn = function (node, props) {
      if (_this2.clerkjs && _this2._loaded) {
        _this2.clerkjs.mountSignIn(node, props);
      } else {
        _this2.premountSignInNodes.set(node, props);
      }
    };

    this.unmountSignIn = function (node) {
      if (_this2.clerkjs && _this2._loaded) {
        _this2.clerkjs.unmountSignIn(node);
      } else {
        _this2.premountSignInNodes["delete"](node);
      }
    };

    this.mountSignUp = function (node, props) {
      if (_this2.clerkjs && _this2._loaded) {
        _this2.clerkjs.mountSignUp(node, props);
      } else {
        _this2.premountSignUpNodes.set(node, props);
      }
    };

    this.unmountSignUp = function (node) {
      if (_this2.clerkjs && _this2._loaded) {
        _this2.clerkjs.unmountSignUp(node);
      } else {
        _this2.premountSignUpNodes["delete"](node);
      }
    };

    this.mountUserProfile = function (node, props) {
      if (_this2.clerkjs && _this2._loaded) {
        _this2.clerkjs.mountUserProfile(node, props);
      } else {
        _this2.premountUserProfileNodes.set(node, props);
      }
    };

    this.unmountUserProfile = function (node) {
      if (_this2.clerkjs && _this2._loaded) {
        _this2.clerkjs.unmountUserProfile(node);
      } else {
        _this2.premountUserProfileNodes["delete"](node);
      }
    };

    this.mountUserButton = function (node, props) {
      if (_this2.clerkjs && _this2._loaded) {
        _this2.clerkjs.mountUserButton(node, props);
      } else {
        _this2.premountUserButtonNodes.set(node, props);
      }
    };

    this.unmountUserButton = function (node) {
      if (_this2.clerkjs && _this2._loaded) {
        _this2.clerkjs.unmountUserButton(node);
      } else {
        _this2.premountUserButtonNodes["delete"](node);
      }
    };

    this.addListener = function (listener) {
      var callback = function callback() {
        var _this2$clerkjs;

        return (_this2$clerkjs = _this2.clerkjs) === null || _this2$clerkjs === void 0 ? void 0 : _this2$clerkjs.addListener(listener);
      };

      if (_this2.clerkjs) {
        callback();
      } else {
        _this2.premountMethodCalls.set('addListener', callback);
      }
    };

    this.loadFromServer = function (token) {
      if (_this2.mode === 'browser') {
        void _this2.throwError('loadFromServer cannot be called in a browser context.');
      }

      _this2.ssrData = JSON.stringify({
        client: _this2.client,
        session: _this2.session,
        token: token
      });
    };

    this.navigate = function (to) {
      var callback = function callback() {
        var _this2$clerkjs2;

        return (_this2$clerkjs2 = _this2.clerkjs) === null || _this2$clerkjs2 === void 0 ? void 0 : _this2$clerkjs2.navigate(to);
      };

      if (_this2.clerkjs && _this2._loaded) {
        void callback();
      } else {
        _this2.premountMethodCalls.set('navigate', callback);
      }
    };

    this.redirectToSignIn = function () {
      var callback = function callback() {
        var _this2$clerkjs3;

        return (_this2$clerkjs3 = _this2.clerkjs) === null || _this2$clerkjs3 === void 0 ? void 0 : _this2$clerkjs3.redirectToSignIn();
      };

      if (_this2.clerkjs && _this2._loaded) {
        callback();
      } else {
        _this2.premountMethodCalls.set('redirectToSignIn', callback);
      }
    };

    this.redirectToSignUp = function () {
      var callback = function callback() {
        var _this2$clerkjs4;

        return (_this2$clerkjs4 = _this2.clerkjs) === null || _this2$clerkjs4 === void 0 ? void 0 : _this2$clerkjs4.redirectToSignUp();
      };

      if (_this2.clerkjs && _this2._loaded) {
        callback();
      } else {
        _this2.premountMethodCalls.set('redirectToSignUp', callback);
      }
    };

    this.redirectToUserProfile = function () {
      var callback = function callback() {
        var _this2$clerkjs5;

        return (_this2$clerkjs5 = _this2.clerkjs) === null || _this2$clerkjs5 === void 0 ? void 0 : _this2$clerkjs5.redirectToUserProfile();
      };

      if (_this2.clerkjs && _this2._loaded) {
        callback();
      } else {
        _this2.premountMethodCalls.set('redirectToUserProfile', callback);
      }
    };

    this.signOut = function (signOutCallback) {
      try {
        var callback = function callback() {
          var _this3$clerkjs;

          return (_this3$clerkjs = _this3.clerkjs) === null || _this3$clerkjs === void 0 ? void 0 : _this3$clerkjs.signOut(signOutCallback);
        };

        if (_this3.clerkjs && _this3._loaded) {
          return Promise.resolve(callback());
        } else {
          _this3.premountMethodCalls.set('signOut', callback);
        }

        return Promise.resolve();
      } catch (e) {
        return Promise.reject(e);
      }
    };

    this.signOutOne = function (signOutCallback) {
      try {
        var callback = function callback() {
          var _this4$clerkjs;

          return (_this4$clerkjs = _this4.clerkjs) === null || _this4$clerkjs === void 0 ? void 0 : _this4$clerkjs.signOutOne(signOutCallback);
        };

        if (_this4.clerkjs && _this4._loaded) {
          return Promise.resolve(callback());
        } else {
          _this4.premountMethodCalls.set('signOutOne', callback);
        }

        return Promise.resolve();
      } catch (e) {
        return Promise.reject(e);
      }
    };

    this.frontendApi = frontendApi;
    this.options = options;
    this.ClerkConstructor = Clerk;
    this.mode = inBrowser() ? 'browser' : 'server'; // TODO: Support SRR for NextJS
    // const ssrDataNode = document.querySelector(`script[data-clerk="SSR"]`);
    // if (ssrDataNode) {
    //   this.ssrData = ssrDataNode.innerHTML;
    //   const parsedData = JSON.parse(this.ssrData);
    //   this.ssrClient = parsedData.client;
    //   this.ssrSession = parsedData.session;
    // }
  }

  var _proto = IsomorphicClerk.prototype;

  _proto.loadClerkJS = function loadClerkJS() {
    var _this5 = this;

    if (!this.frontendApi) {
      void this.throwError(noFrontendApiError);
      return Promise.resolve();
    } // Load a fixed Clerk version passed as a parameter


    if (this.ClerkConstructor) {
      window.Clerk = new this.ClerkConstructor(this.frontendApi);
      return window.Clerk.load(this.options).then(function () {
        return _this5.hydrateClerkJS(window.Clerk);
      })["catch"](function (err) {
        return _this5.throwError(err.message || err);
      });
    } // Hotload latest ClerkJS


    return loadScript(this.frontendApi, this.options.scriptUrl).then(function () {
      if (window.Clerk) {
        return window.Clerk.load(_this5.options);
      }

      throw new Error('Failed to download latest Clerk JS');
    }).then(function () {
      return _this5.hydrateClerkJS(window.Clerk);
    })["catch"](function (err) {
      return _this5.throwError(err.message || err);
    });
  } // Custom wrapper to throw an error, since we need to apply different handling between
  // production and development builds. In Next.js we can throw a full screen error in
  // development mode. However, in production throwing an error results in an infinite loop
  // as shown at https://github.com/vercel/next.js/issues/6973
  ;

  _proto.throwError = function throwError(errorMsg) {

    throw new Error(errorMsg);
  };

  _createClass(IsomorphicClerk, [{
    key: "client",
    get: function get() {
      if (this.clerkjs) {
        return this.clerkjs.client; // TODO: add ssr condition
      } else {
        return undefined;
      }
    }
  }, {
    key: "session",
    get: function get() {
      if (this.clerkjs) {
        return this.clerkjs.session; // TODO: add ssr condition
      } else {
        return undefined;
      }
    }
  }, {
    key: "user",
    get: function get() {
      if (this.clerkjs) {
        return this.clerkjs.user; // TODO: add ssr condition
      } else {
        return undefined;
      }
    }
  }, {
    key: "environment",
    get: function get() {
      if (this.clerkjs) {
        return this.clerkjs.environment; // TODO: add ssr condition
      } else {
        return undefined;
      }
    }
  }]);

  return IsomorphicClerk;
}();

function assertWrappedByClerkProvider(contextVal) {
  if (!contextVal) {
    throw new Error(noClerkProviderError);
  }
}
function assertClerkLoadedGuarantee(guarantee, hookName) {
  if (!guarantee) {
    throw new Error(noGuaranteedLoadedError(hookName));
  }
}
function assertUserGuarantee(guarantee, hookName) {
  if (!guarantee) {
    throw new Error(noGuaranteedUserError(hookName));
  }
}

// per protected provider

var StructureContextStates = /*#__PURE__*/Object.freeze({
  noGuarantees: /*#__PURE__*/Object.freeze({
    guaranteedLoaded: false,
    guaranteedUser: false
  }),
  guaranteedLoaded: /*#__PURE__*/Object.freeze({
    guaranteedLoaded: true,
    guaranteedUser: false
  }),
  guaranteedAll: /*#__PURE__*/Object.freeze({
    guaranteedLoaded: true,
    guaranteedUser: true
  })
});
var StructureContext = /*#__PURE__*/React__default.createContext(undefined);
StructureContext.displayName = 'StructureContext';

var IsomorphicClerkContext = /*#__PURE__*/React__default.createContext(undefined);
IsomorphicClerkContext.displayName = 'IsomorphicClerkContext';
var useClerk = function useClerk() {
  var structureCtx = React.useContext(StructureContext);
  var clerkCtx = React.useContext(IsomorphicClerkContext);
  assertWrappedByClerkProvider(structureCtx);
  assertWrappedByClerkProvider(clerkCtx);
  assertClerkLoadedGuarantee(structureCtx.guaranteedLoaded, 'useClerk()');
  assertClerkLoadedGuarantee(clerkCtx.value, 'useClerk()'); //  The value is an instance of IsomorphicClerk, not Clerk
  // TODO: Remove type cast

  return clerkCtx.value;
};
var withClerk = function withClerk(Component, displayName) {
  displayName = displayName || Component.displayName || Component.name || 'Component';
  Component.displayName = displayName;

  var HOC = function HOC(props) {
    var structureCtx = React.useContext(StructureContext);
    var clerkCtx = React.useContext(IsomorphicClerkContext);

    if (!inBrowser()) {
      return null;
    }

    assertWrappedByClerkProvider(structureCtx);
    assertWrappedByClerkProvider(clerkCtx);
    var clerk = clerkCtx.value;

    if (!clerk) {
      return null;
    }

    if (structureCtx.guaranteedLoaded) {
      return React__default.createElement(Component, Object.assign({}, props, {
        clerk: clerk
      }));
    }

    if (clerk.client) {
      return React__default.createElement(StructureContext.Provider, {
        value: StructureContextStates.guaranteedLoaded
      }, React__default.createElement(Component, Object.assign({}, props, {
        clerk: clerk
      })));
    }

    return null;
  };

  HOC.displayName = "withClerk(" + displayName + ")";
  return HOC;
};
var WithClerk = function WithClerk(_ref) {
  var children = _ref.children;
  return React__default.createElement(StructureContext.Consumer, null, function (structureCtx) {
    return React__default.createElement(IsomorphicClerkContext.Consumer, null, function (clerkCtx) {
      if (typeof children !== 'function') {
        throw new Error(hocChildrenNotAFunctionError);
      }

      assertWrappedByClerkProvider(structureCtx);
      assertWrappedByClerkProvider(clerkCtx);
      var clerk = clerkCtx.value;

      if (!clerk) {
        return null;
      }

      if (structureCtx.guaranteedLoaded) {
        return children(clerk);
      }

      if (clerk.client) {
        return React__default.createElement(StructureContext.Provider, {
          value: StructureContextStates.guaranteedLoaded
        }, children(clerk));
      }

      return null;
    });
  });
};

var ClientContext = /*#__PURE__*/React__default.createContext(undefined);
ClientContext.displayName = 'ClientContext';
function useSignIn() {
  var structureCtx = React.useContext(StructureContext);
  var clientCtx = React__default.useContext(ClientContext);
  assertWrappedByClerkProvider(clientCtx);
  assertWrappedByClerkProvider(structureCtx);
  assertClerkLoadedGuarantee(structureCtx.guaranteedLoaded, 'useSignIn()');
  return clientCtx.value.signIn;
}
function useSignUp() {
  var structureCtx = React.useContext(StructureContext);
  var clientCtx = React__default.useContext(ClientContext);
  assertWrappedByClerkProvider(clientCtx);
  assertWrappedByClerkProvider(structureCtx);
  assertClerkLoadedGuarantee(structureCtx.guaranteedLoaded, 'useSignUp()');
  return clientCtx.value.signUp;
}
function useSessionList() {
  var structureCtx = React.useContext(StructureContext);
  var clientCtx = React__default.useContext(ClientContext);
  assertWrappedByClerkProvider(clientCtx);
  assertWrappedByClerkProvider(structureCtx);
  assertClerkLoadedGuarantee(structureCtx.guaranteedLoaded, 'useSessionList()');
  return clientCtx.value.sessions;
}

var SessionContext = /*#__PURE__*/React__default.createContext(undefined);
SessionContext.displayName = 'SessionContext';
function useSession() {
  var structureCtx = React.useContext(StructureContext);
  var sessionCtx = React__default.useContext(SessionContext);
  assertWrappedByClerkProvider(sessionCtx);
  assertWrappedByClerkProvider(structureCtx);
  assertUserGuarantee(structureCtx.guaranteedUser, 'useSession()');
  return sessionCtx.value;
}

var UserContext = /*#__PURE__*/React__default.createContext(undefined);
UserContext.displayName = 'UserContext';
function useUserContext() {
  var userCtx = React.useContext(UserContext);
  assertWrappedByClerkProvider(userCtx);
  return userCtx;
}
function useUser() {
  var structureCtx = React.useContext(StructureContext);
  assertWrappedByClerkProvider(structureCtx);
  assertUserGuarantee(structureCtx.guaranteedUser, 'useUser()');
  var userCtx = useUserContext();
  assertUserGuarantee(userCtx.value, 'useUser()');
  return userCtx.value;
}
var withUser = function withUser(Component, displayName) {
  displayName = displayName || Component.displayName || Component.name || 'Component';
  Component.displayName = displayName;

  var HOC = function HOC(props) {
    var structureCtx = React.useContext(StructureContext);
    var userCtx = React.useContext(UserContext);

    if (!inBrowser()) {
      return null;
    }

    assertWrappedByClerkProvider(structureCtx);
    assertWrappedByClerkProvider(userCtx);
    var user = userCtx.value;

    if (structureCtx.guaranteedUser && user) {
      return React__default.createElement(Component, Object.assign({}, props, {
        user: user
      }));
    }

    if (user) {
      return React__default.createElement(StructureContext.Provider, {
        value: StructureContextStates.guaranteedAll
      }, React__default.createElement(Component, Object.assign({}, props, {
        user: user
      })));
    }

    return null;
  };

  HOC.displayName = "withUser(" + displayName + ")";
  return HOC;
};
var WithUser = function WithUser(_ref) {
  var children = _ref.children;
  return React__default.createElement(StructureContext.Consumer, null, function (structureCtx) {
    return React__default.createElement(UserContext.Consumer, null, function (userCtx) {
      if (typeof children !== 'function') {
        throw new Error(hocChildrenNotAFunctionError);
      }

      assertWrappedByClerkProvider(structureCtx);
      assertWrappedByClerkProvider(userCtx);
      var user = userCtx.value;

      if (structureCtx.guaranteedUser && user) {
        return children(user);
      }

      if (user) {
        return React__default.createElement(StructureContext.Provider, {
          value: StructureContextStates.guaranteedAll
        }, children(user));
      }

      return null;
    });
  });
};

function ClerkContextWrapper(_ref) {
  var isomorphicClerk = _ref.isomorphicClerk,
      children = _ref.children,
      clerkLoaded = _ref.clerkLoaded;
  var clerk = isomorphicClerk;

  var _React$useState = React__default.useState({
    client: clerk.client,
    session: clerk.session,
    user: clerk.user
  }),
      state = _React$useState[0],
      setState = _React$useState[1];

  React__default.useEffect(function () {
    return clerk.addListener(function (e) {
      return setState(_extends({}, e));
    });
  }, []);
  var client = state.client,
      session = state.session,
      user = state.user;
  var clerkCtx = React__default.useMemo(function () {
    return {
      value: clerk
    };
  }, [clerkLoaded]);
  var clientCtx = React__default.useMemo(function () {
    return {
      value: client
    };
  }, [client]);
  var sessionCtx = React__default.useMemo(function () {
    return {
      value: session
    };
  }, [session]);
  var userCtx = React__default.useMemo(function () {
    return {
      value: user
    };
  }, [user]);
  return React__default.createElement(IsomorphicClerkContext.Provider, {
    value: clerkCtx
  }, React__default.createElement(ClientContext.Provider, {
    value: clientCtx
  }, React__default.createElement(SessionContext.Provider, {
    value: sessionCtx
  }, React__default.createElement(UserContext.Provider, {
    value: userCtx
  }, React__default.createElement(React__default.Fragment, {
    key: session ? session.id : 'no-users'
  }, children)))));
}

function ClerkProviderBase(props) {
  var clerk = React.useMemo(function () {
    var _props$frontendApi = props.frontendApi,
        frontendApi = _props$frontendApi === void 0 ? '' : _props$frontendApi,
        ClerkConstructor = props.Clerk,
        rest = _objectWithoutPropertiesLoose(props, ["frontendApi", "Clerk"]);

    return new IsomorphicClerk(frontendApi, rest, ClerkConstructor);
  }, []);

  var _useState = React.useState(false),
      clerkLoaded = _useState[0],
      setClerkLoaded = _useState[1];

  React.useEffect(function () {
    void clerk.loadClerkJS().then(function () {
      return setClerkLoaded(true);
    });
  }, []);
  return React__default.createElement(StructureContext.Provider, {
    value: StructureContextStates.noGuarantees
  }, clerk instanceof IsomorphicClerk && clerk.ssrData && React__default.createElement("script", {
    type: 'application/json',
    "data-clerk": 'SSR',
    dangerouslySetInnerHTML: {
      __html: clerk.ssrData
    }
  }), React__default.createElement(ClerkContextWrapper, {
    isomorphicClerk: clerk,
    clerkLoaded: clerkLoaded
  }, props.children));
}

var ClerkProvider = /*#__PURE__*/withMaxAllowedInstancesGuard(ClerkProviderBase, 'ClerkProvider', multipleClerkProvidersError);

// lifecycle props to be invoked correctly. Replacing the class component with a
// functional component wrapped with a React.memo is not identical to the original
// class implementation due to React intricacies such as the useEffect’s cleanup
// seems to run AFTER unmount, while componentWillUnmount runs BEFORE.
// More information can be found at https://clerkinc.slack.com/archives/C015S0BGH8R/p1624891993016300
// The function Portal implementation is commented out for future reference.
// const Portal = React.memo(({ props, mount, unmount }: MountProps) => {
//   const portalRef = React.createRef<HTMLDivElement>();
//   useEffect(() => {
//     if (portalRef.current) {
//       mount(portalRef.current, props);
//     }
//     return () => {
//       if (portalRef.current) {
//         unmount(portalRef.current);
//       }
//     };
//   }, []);
//   return <div ref={portalRef} />;
// });
// Portal.displayName = 'ClerkPortal';

var Portal = /*#__PURE__*/function (_React$PureComponent) {
  _inheritsLoose(Portal, _React$PureComponent);

  function Portal() {
    var _this;

    _this = _React$PureComponent.apply(this, arguments) || this;
    _this.portalRef = React__default.createRef();
    return _this;
  }

  var _proto = Portal.prototype;

  _proto.componentDidMount = function componentDidMount() {
    if (this.portalRef.current) {
      this.props.mount(this.portalRef.current, this.props.props);
    }
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    if (this.portalRef.current) {
      this.props.unmount(this.portalRef.current);
    }
  };

  _proto.render = function render() {
    return React__default.createElement("div", {
      ref: this.portalRef
    });
  };

  return Portal;
}(React__default.PureComponent);

var SignIn = /*#__PURE__*/withClerk(function (_ref) {
  var clerk = _ref.clerk,
      props = _objectWithoutPropertiesLoose(_ref, ["clerk"]);

  return React__default.createElement(Portal, {
    mount: clerk.mountSignIn,
    unmount: clerk.unmountSignIn,
    props: props
  });
}, 'SignIn');
var SignUp = /*#__PURE__*/withClerk(function (_ref2) {
  var clerk = _ref2.clerk,
      props = _objectWithoutPropertiesLoose(_ref2, ["clerk"]);

  return React__default.createElement(Portal, {
    mount: clerk.mountSignUp,
    unmount: clerk.unmountSignUp,
    props: props
  });
}, 'SignUp');
var UserProfile = /*#__PURE__*/withClerk(function (_ref3) {
  var clerk = _ref3.clerk,
      props = _objectWithoutPropertiesLoose(_ref3, ["clerk"]);

  return React__default.createElement(Portal, {
    mount: clerk.mountUserProfile,
    unmount: clerk.unmountUserProfile,
    props: props
  });
}, 'UserProfile');
var UserButton = /*#__PURE__*/withClerk(function (_ref4) {
  var clerk = _ref4.clerk,
      props = _objectWithoutPropertiesLoose(_ref4, ["clerk"]);

  return React__default.createElement(Portal, {
    mount: clerk.mountUserButton,
    unmount: clerk.unmountUserButton,
    props: props
  });
}, 'UserButton');

var SignedIn = /*#__PURE__*/withUser(function (_ref) {
  var children = _ref.children;
  return React__default.createElement(React__default.Fragment, null, children);
}, 'SignedIn');
var SignedOut = /*#__PURE__*/withClerk(function (_ref2) {
  var children = _ref2.children;
  var userCtx = useUserContext();
  return userCtx.value === null ? React__default.createElement(React__default.Fragment, null, children) : null;
}, 'SignedOut');
var ClerkLoaded = /*#__PURE__*/withClerk(function (_ref3) {
  var children = _ref3.children;
  return React__default.createElement(React__default.Fragment, null, children);
}, 'ClerkLoaded');
var RedirectToSignIn = /*#__PURE__*/withClerk(function (_ref4) {
  var clerk = _ref4.clerk;
  var client = clerk.client,
      environment = clerk.environment,
      session = clerk.session;
  var hasActiveSessions = client.activeSessions && client.activeSessions.length > 0;
  React__default.useEffect(function () {
    if (session === null && hasActiveSessions && environment) {
      var afterSignOutOneUrl = environment.displayConfig.afterSignOutOneUrl;
      void clerk.navigate(afterSignOutOneUrl);
    } else {
      clerk.redirectToSignIn();
    }
  }, []);
  return null;
}, 'RedirectToSignIn');
var RedirectToSignUp = /*#__PURE__*/withClerk(function (_ref5) {
  var clerk = _ref5.clerk;
  React__default.useEffect(function () {
    clerk.redirectToSignUp();
  }, []);
  return null;
}, 'RedirectToSignUp');
var RedirectToUserProfile = /*#__PURE__*/withClerk(function (_ref6) {
  var clerk = _ref6.clerk;
  React__default.useEffect(function () {
    clerk.redirectToUserProfile();
  }, []);
  return null;
}, 'redirectToUserProfile');

exports.ClerkLoaded = ClerkLoaded;
exports.ClerkProvider = ClerkProvider;
exports.RedirectToSignIn = RedirectToSignIn;
exports.RedirectToSignUp = RedirectToSignUp;
exports.RedirectToUserProfile = RedirectToUserProfile;
exports.SignIn = SignIn;
exports.SignUp = SignUp;
exports.SignedIn = SignedIn;
exports.SignedOut = SignedOut;
exports.UserButton = UserButton;
exports.UserProfile = UserProfile;
exports.WithClerk = WithClerk;
exports.WithUser = WithUser;
exports.useClerk = useClerk;
exports.useSession = useSession;
exports.useSessionList = useSessionList;
exports.useSignIn = useSignIn;
exports.useSignUp = useSignUp;
exports.useUser = useUser;
exports.withClerk = withClerk;
exports.withUser = withUser;
//# sourceMappingURL=clerk-react.cjs.development.js.map
