import type { Clerk, ClientResource, SessionResource, UserResource } from '@clerk/types';
declare global {
    export interface Window {
        Clerk?: BrowserClerk;
    }
}
declare type HistoryChange = (to: string) => any;
export interface ClerkOptions {
    navigate?: HistoryChange;
    selectInitialSession?: (client: ClientResource) => SessionResource | null;
    scriptUrl?: string;
}
export interface BrowserClerkConstructor {
    new (frontendApi: string): BrowserClerk;
}
export declare type WithClerkProp<T> = T & {
    clerk: LoadedClerk;
};
export declare type WithUserProp<T> = T & {
    user: UserResource;
};
export interface MountProps {
    mount: (node: HTMLDivElement, props: any) => void;
    unmount: (node: HTMLDivElement) => void;
    props?: any;
}
export interface BrowserClerk extends Clerk {
    load: (opts?: ClerkOptions) => Promise<void>;
    updateClient: (client: ClientResource) => void;
    onComponentsReady: Promise<void>;
    components: any;
}
export interface LoadedClerk extends Clerk {
    client: ClientResource;
}
export {};
