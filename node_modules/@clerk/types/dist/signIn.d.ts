import { ClerkResource } from './resource';
import { SnakeToCamel } from './utils';
import { VerificationResource } from './verification';
import { OAuthCallbacks, OAuthStrategy } from './oauth';
export interface SignInResource extends ClerkResource {
    status: SignInStatus | null;
    supportedIdentifiers: SignInIdentifier[];
    supportedExternalAccounts: OAuthStrategy[];
    supportedFirstFactors: SignInFactor[];
    supportedSecondFactors: SignInFactor[];
    firstFactorVerification: VerificationResource;
    secondFactorVerification: VerificationResource;
    identifier: string | null;
    unsafeMetadata: Record<string, unknown>;
    createdSessionId: string | null;
    userData: UserData;
    /**
     * @deprecated `allowedIdentifierTypes` has been deprecated and will be removed soon.
     * Use {@link SignInResource.supportedIdentifiers} and {@link SignInResource.supportedExternalAccounts} instead.
     */
    allowedIdentifierTypes: IdentificationStrategy[];
    /**
     * @deprecated `allowedFactorOneStrategies` has been deprecated and will be removed soon.
     * Use {@link SignInResource.supportedFirstFactors} instead.
     */
    allowedFactorOneStrategies: SignInStrategy[];
    /**
     * @deprecated `allowedFactorTwoStrategies` has been deprecated and will be removed soon.
     * Use {@link SignInResource.supportedSecondFactors} instead.
     */
    allowedFactorTwoStrategies: SignInStrategy[];
    /**
     * @deprecated `factorOneVerification` has been deprecated and will be removed soon.
     * Use {@link SignInResource.firstFactorVerification} instead.
     */
    factorOneVerification: VerificationResource;
    /**
     * @deprecated `factorTwoVerification` has been deprecated and will be removed soon.
     * Use {@link SignInResource.secondFactorVerification} instead.
     */
    factorTwoVerification: VerificationResource;
    create: (params: SignInParams) => Promise<SignInResource>;
    /**
     * @deprecated `update` has been deprecated and will be removed soon. Use {@link SignInResource.create} instead.
     */
    update: (params: SignInParams) => Promise<SignInResource>;
    /**
     * @deprecated `prepareFactorOne` has been deprecated and will be removed soon.
     * Use {@link SignInResource.prepareFirstFactor} instead.
     */
    prepareFactorOne: (strategy: any) => Promise<SignInResource>;
    prepareFirstFactor: (strategy: PrepareFirstFactorParams) => Promise<SignInResource>;
    /**
     * @deprecated `attemptFactorOne` has been deprecated and will be removed soon.
     * Use {@link SignInResource.attemptFirstFactor} instead.
     */
    attemptFactorOne: (params: any) => Promise<SignInResource>;
    attemptFirstFactor: (params: AttemptFactorParams) => Promise<SignInResource>;
    /**
     * @deprecated `prepareFactorTwo` has been deprecated and will be removed soon.
     * Use {@link SignInResource.prepareSecondFactor} instead.
     */
    prepareFactorTwo: (params: any) => Promise<SignInResource>;
    prepareSecondFactor: (params: PrepareSecondFactorParams) => Promise<SignInResource>;
    /**
     * @deprecated `attemptFactorTwo` has been deprecated and will be removed soon.
     * Use {@link SignInResource.attemptSecondFactor} instead.
     */
    attemptFactorTwo: (params: any) => Promise<SignInResource>;
    attemptSecondFactor: (params: AttemptFactorParams) => Promise<SignInResource>;
    signInWithOAuth: (strategy: OAuthStrategy, callbacks: OAuthCallbacks) => Promise<void>;
}
export declare type SignInIdentifier = 'username' | 'email_address' | 'phone_number';
export declare type IdentificationStrategy = SignInIdentifier | OAuthStrategy;
export declare type SignInStrategyName = 'password' | 'phone_code' | 'email_code' | OAuthStrategy;
export declare type SignInStatus = 'needs_identifier' | 'needs_factor_one' | 'needs_factor_two' | 'needs_first_factor' | 'needs_second_factor' | 'complete';
export declare type PreferredSignInStrategy = 'password' | 'otp';
declare type EmailCodeFactor = {
    strategy: Extract<SignInStrategyName, 'email_code'>;
    email_address_id: string;
    safe_identifier: string;
};
declare type PhoneCodeFactor = {
    strategy: Extract<SignInStrategyName, 'phone_code'>;
    phone_number_id: string;
    safe_identifier: string;
};
declare type PasswordFactor = {
    strategy: Extract<SignInStrategyName, 'password'>;
};
declare type OauthFactor = {
    strategy: OAuthStrategy;
};
/**
 * @deprecated `SignInStrategyName` has been deprecated and will be removed soon.
 * Use {@link SignInFactor} instead.
 */
export declare type SignInStrategy = {
    email_address_id?: string;
    phone_number_id?: string;
    safe_identifier?: string;
    name: SignInStrategyName;
};
export declare type SignInFactor = EmailCodeFactor | PhoneCodeFactor | PasswordFactor | OauthFactor;
export declare type PrepareFirstFactorParams = Omit<EmailCodeFactor, 'safe_identifier'> | Omit<PhoneCodeFactor, 'safe_identifier'> | (OauthFactor & {
    redirect_url: string;
    action_complete_redirect_url: string;
});
export declare type PrepareSecondFactorParams = Pick<PhoneCodeFactor, 'strategy'>;
export declare type AttemptFactorParams = {
    strategy: Extract<SignInStrategyName, 'email_code' | 'phone_code'>;
    code: string;
} | {
    strategy: Extract<SignInStrategyName, 'password'>;
    password: string;
};
export interface UserData {
    first_name?: string;
    last_name?: string;
    profile_image_url?: string;
}
declare type SignInAttributes = {
    /**
     * An email address, phone or username to identify the attempt.
     */
    identifier?: string;
    /**
     * The first step of the strategy to perform.
     */
    strategy?: SignInStrategyName;
    /**
     * Required if the strategy is "password".
     * The password to attempt to sign in with.
     */
    password?: string;
    /**
     * Required if the strategy is one of the OAuth providers.
     * This is the URL that the user will be redirected to after the OAuth verification completes.
     */
    redirect_url?: string;
    /**
     * Optional if the strategy is one of the OAuth providers.
     * If the OAuth verification results in a completed Sign in, this is the URL that
     * the user will be redirected to.
     */
    action_complete_redirect_url?: string;
    /**
     * A custom JSON object (as string) to store any type of information that makes sense in the
     * context of the current sign in.
     */
    unsafe_metadata?: Record<string, unknown>;
} & {
    transfer: boolean;
};
export declare type SignInParams = Partial<SnakeToCamel<SignInAttributes> & SignInAttributes>;
export {};
//# sourceMappingURL=signIn.d.ts.map