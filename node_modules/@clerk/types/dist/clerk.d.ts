import { ClientResource } from './client';
import { EnvironmentResource } from './environment';
import { SessionResource } from './session';
import { UserResource } from './user';
export declare type SignOutCallback = () => void | Promise<any>;
/**
 * Main Clerk SDK object.
 */
export interface Clerk {
    /**
     * Clerk SDK version number.
     * TODO: Fix Isomorphic clerk to retrieve version and make this required.
     */
    version?: string;
    /** Client handling most Clerk operations. */
    client?: ClientResource;
    /** Active Session. */
    session?: SessionResource | null;
    /** Current User. */
    user?: UserResource | null;
    /** Environment configuration. */
    environment?: EnvironmentResource | null;
    /**
     * Signs out the current user on single-session instances, or all users on multi-session instances.
     *
     * @param signOutCallback - Optional A callback that runs after sign out completes.
     * @returns A promise that resolves when the sign out process completes.
     */
    signOut: (signOutCallback?: SignOutCallback) => Promise<void>;
    /**
     * Signs out the current user.
     *
     * @param signOutCallback - Optional A callback that runs after sign out completes.
     * @returns A promise that resolves when the sign out process completes.
     */
    signOutOne: (signOutCallback?: SignOutCallback) => Promise<void>;
    /**
     * Opens the Clerk sign-in modal.
     *
     * @param signInProps Optional sign-in configuration parameters.
     */
    openSignIn: (signInProps?: SignInProps) => void;
    /** Closes the Clerk sign-in modal. */
    closeSignIn: () => void;
    /**
     * Opens the Clerk sign-up modal.
     *
     * @param signUpProps Optional sign-up configuration parameters.
     */
    openSignUp: (signUpProps?: SignUpProps) => void;
    /** Closes the Clerk sign-up modal. */
    closeSignUp: () => void;
    /**
     * Mounts a sign-in flow component at the target element.
     *
     * @param targetNode Target node to mount the SignIn component.
     * @param signInProps Sign-in configuration parameters.
     */
    mountSignIn: (targetNode: HTMLDivElement, signInProps?: SignInProps) => void;
    /**
     * Unmount a sign-in flow component from the target element.
     * If there is no component mounted at the target node, results in a noop.
     *
     * @param targetNode Target node to unmount the SignIn component from.
     */
    unmountSignIn: (targetNode: HTMLDivElement) => void;
    /**
     * Mounts a sign-up flow component at the target element.
     *
     * @param targetNode Target node to mount the SignUp component.
     * @param signUnProps Sign-up configuration parameters.
     */
    mountSignUp: (targetNode: HTMLDivElement, signUnProps?: SignUpProps) => void;
    /**
     * Unmount a sign-up flow component from the target element.
     * If there is no component mounted at the target node, results in a noop.
     *
     * @param targetNode Target node to unmount the SignUp component from.
     */
    unmountSignUp: (targetNode: HTMLDivElement) => void;
    /**
     * Mount a user button component at the target element.
     *
     * @param targetNode Target node to mount the UserButton component.
     * @param userButtonProps User button configuration parameters.
     */
    mountUserButton: (targetNode: HTMLDivElement, userButtonProps?: UserButtonProps) => void;
    /**
     * Unmount a user button component at the target element.
     * If there is no component mounted at the target node, results in a noop.
     *
     * @param targetNode Target node to unmount the UserButton component from.
     */
    unmountUserButton: (targetNode: HTMLDivElement) => void;
    /**
     * Mount a user profile component at the target element.
     *
     * @param targetNode Target to mount the UserProfile component.
     * @param userProfileProps User profile configuration parameters.
     */
    mountUserProfile: (targetNode: HTMLDivElement, userProfileProps?: UserProfileProps) => void;
    /**
     * Unmount a user profile component at the target element.
     * If there is no component mounted at the target node, results in a noop.
     *
     * @param targetNode Target node to unmount the UserProfile component from.
     */
    unmountUserProfile: (targetNode: HTMLDivElement) => void;
    /**
     * Register a listener that triggers a callback each time important Clerk resources are changed.
     * Allows to hook up at different steps in the sign-up, sign-in processes.
     *
     * Some important checkpoints:
     *    When there is an active session, user === session.user.
     *    When there is no active session, user and session will both be null.
     *    When a session is loading, user and session will be undefined.
     *
     * @param callback Callback function receiving the most updated Clerk resources after a change.
     * @returns - Unsubscribe callback
     */
    addListener: (callback: (resources: Resources) => void) => () => void;
    /**
     * Set the current session explicitly.
     *
     * Setting the session to `null` deletes the active session.
     *
     * @param session Passed session resource object, session id (string version) or null
     * @param beforeEmit Callback run just before the active session is set to the passed object. Can be used to hook up for pre-navigation actions.
     */
    setSession: (session: SessionResource | string | null, beforeEmit?: (session: SessionResource | null) => any) => Promise<void>;
    /**
     * Function used to commit a navigation after certain steps in the Clerk processes.
     *
     */
    navigate: CustomNavigation;
    /**
     * Redirects to the configured sign-in URL. Retrieved from {@link environment}.
     */
    redirectToSignIn: () => void;
    /**
     * Redirects to the configured sign-up URL. Retrieved from {@link environment}.
     */
    redirectToSignUp: () => void;
    /**
     * Redirects to the configured user profile URL. Retrieved from {@link environment}.
     */
    redirectToUserProfile: () => void;
}
export declare type CustomNavigation = (to: string) => Promise<unknown> | void;
export interface Resources {
    client: ClientResource;
    session?: SessionResource | null;
    user?: UserResource | null;
}
export declare type RoutingStrategy = 'path' | 'hash' | 'virtual';
export interface SignInProps {
    /** Page routing strategy. */
    routing?: RoutingStrategy;
    /** Root URL where the component is mounted on. */
    path?: string;
    /** Full URL or path to navigate after successful sign-in. */
    afterSignIn?: string | null;
    /**
     * Full URL or path to for the sign-up process.
     * Used to fill the "Sign up" link in the SignIn component.
     */
    signUpURL?: string;
}
export interface SignUpProps {
    /** Page routing strategy. */
    routing?: RoutingStrategy;
    /** Root URL where the component is mounted on. */
    path?: string;
    /** Full URL or path to navigate after successful sign-up. */
    afterSignUp?: string | null;
    /**
     * Full URL or path to for the sign-in process.
     * Used to fill the "Sign in" link in the SignUp component.
     */
    signInURL?: string;
}
export interface UserProfileProps {
    /** Page routing strategy. */
    routing?: RoutingStrategy;
    /** Root URL where the component is mounted on. */
    path?: string;
    /** Full URL or path to navigate after successful sign-out with no other accounts still active. */
    afterSignOutAll?: string;
    /** Full URL or path to navigate after successful sign-out with other accounts still active. */
    afterSignOutOne?: string;
}
export interface UserButtonProps {
    /**
     * Full URL or path to navigate after successful account change.
     * Multi-session mode only.
     */
    afterSwitchSession?: string;
    /** Full URL or path leading to the account management interface. */
    userProfileURL?: string;
    /**
     * Full URL or path to navigate on "Add another account" action.
     * Multi-session mode only.
     */
    signInURL?: string;
    /** Full URL or path to navigate after sign-out is complete and there are not other active sessions on this client. */
    afterSignOutAll?: string;
    /** Full URL or path to navigate after sign-out is complete. */
    afterSignOutOne?: string;
}
//# sourceMappingURL=clerk.d.ts.map