import { ClerkResource } from './resource';
import { SnakeToCamel } from './utils';
import { VerificationResource } from './verification';
export interface SignInAttemptResource extends ClerkResource {
    status: SignInStatus | null;
    allowedIdentifierTypes: SignInIdentifier[];
    identifier: string | null;
    allowedFactorOneStrategies: SignInStrategy[];
    allowedFactorTwoStrategies: SignInStrategy[];
    factorOneVerification: VerificationResource;
    factorTwoVerification: VerificationResource;
    createdSessionId: string | null;
    userData: UserData;
    create: (params: SignInAttemptParams) => Promise<SignInAttemptResource>;
    prepareFactorOne: (strategy: SignInStrategy) => Promise<SignInAttemptResource>;
    attemptFactorOne: (params: any) => Promise<SignInAttemptResource>;
    prepareFactorTwo: (params: any) => Promise<SignInAttemptResource>;
    attemptFactorTwo: (params: any) => Promise<SignInAttemptResource>;
    signInWithOAuth: (strategy: SignInStrategyName, callbacks: OAuthCallbacks) => void;
}
export declare type OAuthCallbacks = {
    callbackUrl: string;
    callbackUrlComplete: string;
};
export declare type SignInIdentifier = 'username' | 'email_address' | 'phone_number' | 'oauth_google' | 'oauth_facebook';
export declare type SignInStrategyName = 'password' | 'oauth_google' | 'oauth_facebook' | 'phone_code' | 'email_code';
export declare type SignInStatus = 'needs_identifier' | 'needs_factor_one' | 'needs_factor_two' | 'complete';
export declare type PreferredSignInStrategy = 'password' | 'otp';
export declare type SignInStrategy = {
    email_address_id?: string;
    phone_number_id?: string;
    safe_identifier?: string;
    name: SignInStrategyName;
};
export interface UserData {
    first_name?: string;
    last_name?: string;
    profile_image_url?: string;
}
declare type SignInAttemptAttributes = {
    /**
     * An email address, phone or username to identify the attempt.
     */
    identifier?: string;
    /**
     * The first step of the strategy to perform.
     */
    strategy?: SignInStrategyName;
    /**
     * Required if the strategy is "password".
     * The password to attempt to sign in with.
     */
    password?: string;
    /**
     * Required if the strategy is one of the OAuth providers.
     * This is the URL that the user will be redirected to after the OAuth verification completes.
     */
    redirect_url?: string;
    /**
     * Optional if the strategy is one of the OAuth providers.
     * If the OAuth verification results in a completed Sign in, this is the URL that
     * the user will be redirected to.
     */
    action_complete_redirect_url?: string;
} & {
    transfer: boolean;
};
export declare type SignInAttemptParams = Partial<SnakeToCamel<SignInAttemptAttributes> & SignInAttemptAttributes>;
export {};
//# sourceMappingURL=signInAttempt.d.ts.map