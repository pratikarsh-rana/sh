'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var Cookies = _interopDefault(require('cookies'));
var got = _interopDefault(require('got'));
var camelcaseKeys = _interopDefault(require('camelcase-keys'));
var snakecaseKeys = _interopDefault(require('snakecase-keys'));
var querystring = require('querystring');

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  subClass.__proto__ = superClass;
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _construct(Parent, args, Class) {
  if (_isNativeReflectConstruct()) {
    _construct = Reflect.construct;
  } else {
    _construct = function _construct(Parent, args, Class) {
      var a = [null];
      a.push.apply(a, args);
      var Constructor = Function.bind.apply(Parent, a);
      var instance = new Constructor();
      if (Class) _setPrototypeOf(instance, Class.prototype);
      return instance;
    };
  }

  return _construct.apply(null, arguments);
}

function _isNativeFunction(fn) {
  return Function.toString.call(fn).indexOf("[native code]") !== -1;
}

function _wrapNativeSuper(Class) {
  var _cache = typeof Map === "function" ? new Map() : undefined;

  _wrapNativeSuper = function _wrapNativeSuper(Class) {
    if (Class === null || !_isNativeFunction(Class)) return Class;

    if (typeof Class !== "function") {
      throw new TypeError("Super expression must either be null or a function");
    }

    if (typeof _cache !== "undefined") {
      if (_cache.has(Class)) return _cache.get(Class);

      _cache.set(Class, Wrapper);
    }

    function Wrapper() {
      return _construct(Class, arguments, _getPrototypeOf(this).constructor);
    }

    Wrapper.prototype = Object.create(Class.prototype, {
      constructor: {
        value: Wrapper,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    return _setPrototypeOf(Wrapper, Class);
  };

  return _wrapNativeSuper(Class);
}

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var runtime_1 = createCommonjsModule(function (module) {
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var runtime = (function (exports) {

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined$1; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function define(obj, key, value) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
    return obj[key];
  }
  try {
    // IE 8 has a broken Object.defineProperty that only works on DOM objects.
    define({}, "");
  } catch (err) {
    define = function(obj, key, value) {
      return obj[key] = value;
    };
  }

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  exports.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunction.displayName = define(
    GeneratorFunctionPrototype,
    toStringTagSymbol,
    "GeneratorFunction"
  );

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      define(prototype, method, function(arg) {
        return this._invoke(method, arg);
      });
    });
  }

  exports.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  exports.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      define(genFun, toStringTagSymbol, "GeneratorFunction");
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  exports.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return PromiseImpl.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return PromiseImpl.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  exports.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    if (PromiseImpl === void 0) PromiseImpl = Promise;

    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList),
      PromiseImpl
    );

    return exports.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined$1) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined$1;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined$1;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  define(Gp, toStringTagSymbol, "Generator");

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined$1;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  exports.values = values;

  function doneResult() {
    return { value: undefined$1, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined$1;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined$1;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined$1;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined$1;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined$1;
      }

      return ContinueSentinel;
    }
  };

  // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.
  return exports;

}(
  // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
   module.exports 
));

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  Function("r", "regeneratorRuntime = r")(runtime);
}
});

var ObjectType;

(function (ObjectType) {
  ObjectType["Client"] = "client";
  ObjectType["Email"] = "email";
  ObjectType["EmailAddress"] = "email_address";
  ObjectType["FacebookAccount"] = "facebook_account";
  ObjectType["GoogleAccount"] = "google_account";
  ObjectType["ExternalAccount"] = "external_account";
  ObjectType["PhoneNumber"] = "phone_number";
  ObjectType["Session"] = "session";
  ObjectType["SignInAttempt"] = "sign_in_attempt";
  ObjectType["SignUpAttempt"] = "sign_up_attempt";
  ObjectType["SmsMessage"] = "sms_message";
  ObjectType["User"] = "user";
})(ObjectType || (ObjectType = {}));

function filterKeys(data, allowedKeys) {
  return Object.keys(data).filter(function (key) {
    return allowedKeys.includes(key);
  }).reduce(function (obj, key) {
    obj[key] = data[key];
    return obj;
  }, {});
}

var Association;

(function (Association) {
  Association["HasOne"] = "HasOne";
  Association["HasMany"] = "HasMany";
})(Association || (Association = {}));

function associationDefaults(associations) {
  return Object.entries(associations).reduce(function (obj, _ref) {
    var k = _ref[0],
        v = _ref[1];

    if (v == Association.HasMany) {
      obj[k] = [];
    }

    return obj;
  }, {});
}

var Session = /*#__PURE__*/function () {
  function Session(data) {
    if (data === void 0) {
      data = {};
    }

    Object.assign(this, Session.defaults, data);
  }

  Session.fromJSON = function fromJSON(data) {
    var camelcased = camelcaseKeys(data);
    var filtered = filterKeys(camelcased, Session.attributes);
    return new Session(filtered);
  };

  return Session;
}();
Session.attributes = ['id', 'clientId', 'userId', 'status', 'lastActiveAt', 'expireAt', 'abandonAt'];
Session.defaults = {};

var Client = /*#__PURE__*/function () {
  function Client(data) {
    if (data === void 0) {
      data = {};
    }

    Object.assign(this, Client.defaults, data);
  }

  Client.fromJSON = function fromJSON(data) {
    var obj = {};
    var camelcased = camelcaseKeys(data);
    var filtered = filterKeys(camelcased, Client.attributes);
    Object.assign(obj, filtered);
    obj.sessions = (data.sessions || []).map(function (x) {
      return Session.fromJSON(x);
    });
    return new Client(obj);
  };

  return Client;
}();
Client.attributes = ['id', 'sessionIds', 'signUpAttemptId', 'signInAttemptId', 'lastActiveSessionId', 'createdAt', 'updatedAt'];
Client.associations = {
  sessions: Association.HasMany
};
Client.defaults = /*#__PURE__*/_extends({}, /*#__PURE__*/associationDefaults(Client.associations));

var Email = /*#__PURE__*/function () {
  function Email(data) {
    if (data === void 0) {
      data = {};
    }

    Object.assign(this, Email.defaults, data);
  }

  Email.fromJSON = function fromJSON(data) {
    var camelcased = camelcaseKeys(data);
    var filtered = filterKeys(camelcased, Email.attributes);
    return new Email(filtered);
  };

  return Email;
}();
Email.attributes = ['id', 'fromEmailName', 'toEmailAddress', 'emailAddressId', 'subject', 'body', 'status'];
Email.defaults = {};

var SMSMessage = /*#__PURE__*/function () {
  function SMSMessage(data) {
    if (data === void 0) {
      data = {};
    }

    Object.assign(this, SMSMessage.defaults, data);
  }

  SMSMessage.fromJSON = function fromJSON(data) {
    var camelcased = camelcaseKeys(data);
    var filtered = filterKeys(camelcased, SMSMessage.attributes);
    return new SMSMessage(filtered);
  };

  return SMSMessage;
}();
SMSMessage.attributes = ['id', 'fromPhoneNumber', 'toPhoneNumber', 'phoneNumberId', 'message', 'status'];
SMSMessage.defaults = {};

var Verification = /*#__PURE__*/function () {
  function Verification(data) {
    if (data === void 0) {
      data = {};
    }

    Object.assign(this, Verification.defaults, data);
  }

  Verification.fromJSON = function fromJSON(data) {
    var obj = {};

    if (data) {
      obj.status = data.status;
      obj.strategy = data.strategy;

      if (data.external_verification_redirect_url) {
        obj.externalVerificationRedirectURL = new URL(data.external_verification_redirect_url);
      } else {
        obj.externalVerificationRedirectURL = null;
      }

      obj.attempts = data.attempts;
      obj.expireAt = data.expire_at;
    } else {
      obj.status = null;
      obj.strategy = null;
      obj.externalVerificationRedirectURL = null;
      obj.attempts = null;
      obj.expireAt = null;
    }

    return new Verification(obj);
  };

  return Verification;
}();
Verification.attributes = ['status', 'strategy', 'externalVerificationRedirectURL', 'attempts', 'expireAt'];
Verification.defaults = {};

var IdentificationLink = /*#__PURE__*/function () {
  function IdentificationLink(data) {
    if (data === void 0) {
      data = {};
    }

    Object.assign(this, IdentificationLink.defaults, data);
  }

  IdentificationLink.fromJSON = function fromJSON(data) {
    var camelcased = camelcaseKeys(data);
    var filtered = filterKeys(camelcased, IdentificationLink.attributes);
    return new IdentificationLink(filtered);
  };

  return IdentificationLink;
}();
IdentificationLink.attributes = ['id', 'type'];
IdentificationLink.defaults = {};

var EmailAddress = /*#__PURE__*/function () {
  function EmailAddress(data) {
    if (data === void 0) {
      data = {};
    }

    Object.assign(this, EmailAddress.defaults, data);
  }

  EmailAddress.fromJSON = function fromJSON(data) {
    return new EmailAddress({
      id: data.id,
      emailAddress: data.email_address,
      verification: Verification.fromJSON(data.verification),
      linkedTo: (data.linked_to || []).map(function (link) {
        return IdentificationLink.fromJSON(link);
      })
    });
  };

  return EmailAddress;
}();
EmailAddress.attributes = ['id', 'emailAddress'];
EmailAddress.associations = {
  verification: Association.HasOne,
  linkedTo: Association.HasMany
};
EmailAddress.defaults = /*#__PURE__*/associationDefaults(EmailAddress.associations);

var ExternalAccount = /*#__PURE__*/function () {
  function ExternalAccount(data) {
    if (data === void 0) {
      data = {};
    }

    Object.assign(this, ExternalAccount.defaults, data);
  }

  ExternalAccount.fromJSON = function fromJSON(data) {
    var obj = {};
    obj.id = data.id;
    obj.approvedScopes = data.approved_scopes;
    obj.emailAddress = data.email_address;

    switch (data.object) {
      case ObjectType.FacebookAccount:
        {
          obj.provider = 'facebook';
          var fbData = data;
          obj.externalId = fbData.facebook_id;
          obj.firstName = fbData.first_name;
          obj.lastName = fbData.last_name;
          obj.picture = data.picture;
          break;
        }

      case ObjectType.GoogleAccount:
        {
          obj.provider = 'google';
          var gData = data;
          obj.externalId = gData.google_id;
          obj.firstName = gData.given_name;
          obj.lastName = gData.family_name;
          obj.picture = data.picture;
          break;
        }

      case ObjectType.ExternalAccount:
        {
          obj.provider = data.provider;
          var extData = data;
          obj.externalId = extData.provider_user_id;
          obj.firstName = extData.first_name;
          obj.lastName = extData.last_name;
          obj.picture = extData.avatar_url;
          break;
        }

      default:
        throw new Error('Unsupported external account type');
    }

    return new ExternalAccount(obj);
  };

  return ExternalAccount;
}();
ExternalAccount.attributes = ['id', 'provider', 'externalId', 'approvedScopes', 'emailAddress', 'firstName', 'lastName', 'picture'];
ExternalAccount.defaults = {};

var PhoneNumber = /*#__PURE__*/function () {
  function PhoneNumber(data) {
    if (data === void 0) {
      data = {};
    }

    Object.assign(this, PhoneNumber.defaults, data);
  }

  PhoneNumber.fromJSON = function fromJSON(data) {
    return new PhoneNumber({
      id: data.id,
      phoneNumber: data.phone_number,
      reservedForSecondFactor: data.reserved_for_second_factor,
      verification: Verification.fromJSON(data.verification),
      linkedTo: (data.linked_to || []).map(function (link) {
        return IdentificationLink.fromJSON(link);
      })
    });
  };

  return PhoneNumber;
}();
PhoneNumber.attributes = ['id', 'phoneNumber', 'reservedForSecondFactor'];
PhoneNumber.associations = {
  verification: Association.HasOne,
  linkedTo: Association.HasMany
};
PhoneNumber.defaults = /*#__PURE__*/associationDefaults(PhoneNumber.associations);

var User = /*#__PURE__*/function () {
  function User(data) {
    if (data === void 0) {
      data = {};
    }

    Object.assign(this, User.defaults, data);
  }

  User.fromJSON = function fromJSON(data) {
    var obj = {};
    var camelcased = camelcaseKeys(data);
    var filtered = filterKeys(camelcased, User.attributes);
    Object.assign(obj, filtered);
    obj.emailAddresses = (data.email_addresses || []).map(function (x) {
      return EmailAddress.fromJSON(x);
    });
    obj.phoneNumbers = (data.phone_numbers || []).map(function (x) {
      return PhoneNumber.fromJSON(x);
    });
    obj.externalAccounts = (data.external_accounts || []).map(function (x) {
      return ExternalAccount.fromJSON(x);
    });
    return new User(obj);
  };

  return User;
}();
User.attributes = ['id', 'username', 'firstName', 'lastName', 'gender', 'birthday', 'profileImageUrl', 'primaryEmailAddressId', 'primaryEmailAddressId', 'primaryPhoneNumberId', 'passwordEnabled', 'twoFactorEnabled', 'passwordEnabled', 'passwordEnabled', 'passwordEnabled', 'twoFactorEnabled', 'publicMetadata', 'privateMetadata', 'createdAt', 'updatedAt'];
User.associations = {
  emailAddresses: Association.HasMany,
  phoneNumbers: Association.HasMany,
  externalAccounts: Association.HasMany
};
User.defaults = /*#__PURE__*/_extends({
  publicMetadata: {},
  privateMetadata: {}
}, /*#__PURE__*/associationDefaults(User.associations));

// TODO use EventEmitter for an async Logger instead
// TODO support more than just console output
var LogLevel;

(function (LogLevel) {
  LogLevel["Info"] = "INFO";
  LogLevel["Debug"] = "DEBUG";
  LogLevel["Warn"] = "WARN";
  LogLevel["Error"] = "ERROR";
})(LogLevel || (LogLevel = {}));

var Logger = /*#__PURE__*/function () {
  function Logger() {}

  Logger.info = function info(msg) {
    Logger.log(LogLevel.Info, msg);
  };

  Logger.debug = function debug(msg) {
    Logger.log(LogLevel.Debug, msg);
  };

  Logger.warn = function warn(msg) {
    Logger.log(LogLevel.Warn, msg);
  };

  Logger.error = function error(msg) {
    Logger.log(LogLevel.Error, msg);
  };

  Logger.log = function log(logLevel, msg) {
    if (process.env.CLERK_LOGGING == 'true') {
      var logMessage = {
        timestamp: new Date().toISOString(),
        level: logLevel,
        message: msg
      }; // @ts-ignore

      console[logLevel.toLowerCase()](logMessage);
    }
  };

  return Logger;
}();

function deserialize(data) {
  if (Array.isArray(data)) {
    return data.map(function (item) {
      return jsonToObject(item);
    });
  } else {
    return jsonToObject(data);
  }
} // FIXME don't return any
// item must have 'object' key

function jsonToObject(item) {
  switch (item.object) {
    case ObjectType.Client:
      return Client.fromJSON(item);

    case ObjectType.Email:
      return Email.fromJSON(item);

    case ObjectType.User:
      return User.fromJSON(item);

    case ObjectType.Session:
      return Session.fromJSON(item);

    case ObjectType.SmsMessage:
      return SMSMessage.fromJSON(item);

    default:
      Logger.error("Unexpected object type: " + item.object);
  }
}

var HttpError = /*#__PURE__*/function (_Error) {
  _inheritsLoose(HttpError, _Error);

  function HttpError(statusCode, message, data) {
    var _this;

    _this = _Error.call(this, message) || this;
    _this.statusCode = statusCode;
    _this.data = data;
    return _this;
  }

  return HttpError;
}( /*#__PURE__*/_wrapNativeSuper(Error));
var ClerkServerError = /*#__PURE__*/function () {
  function ClerkServerError(data) {
    this.message = data.message;
    this.longMessage = data.longMessage;
    this.code = data.code;
  }

  ClerkServerError.fromJSON = function fromJSON(data) {
    return new ClerkServerError({
      message: data.message,
      longMessage: data.long_message,
      code: data.code
    });
  };

  return ClerkServerError;
}();

function handleError(error) {
  var _error$response, _error$response2;

  var statusCode = (error == null ? void 0 : (_error$response = error.response) == null ? void 0 : _error$response.statusCode) || 500;
  var message = error.message || '';
  var body = error == null ? void 0 : (_error$response2 = error.response) == null ? void 0 : _error$response2.body;
  var data;

  if (body && body.errors) {
    data = (body.errors || []).map(function (errorJSON) {
      return ClerkServerError.fromJSON(errorJSON);
    });
  } else {
    data = body;
  }

  throw new HttpError(statusCode, message, data);
}

var packageName = '@clerk/clerk-sdk-node'; // TODO get from package.json

var packageVersion = '0.5.1'; // TODO get from package.json

var packageRepo = 'https://github.com/clerkinc/clerk-sdk-node';
var userAgent = packageName + "/" + packageVersion + " (" + packageRepo + ")";
var contentType = 'application/x-www-form-urlencoded';

var RestClient = /*#__PURE__*/function () {
  function RestClient(apiKey, serverApiUrl, apiVersion, httpOptions) {
    this.apiKey = apiKey;
    this.serverApiUrl = serverApiUrl;
    this.apiVersion = apiVersion;
    this.httpOptions = httpOptions || {};
  }

  var _proto = RestClient.prototype;

  _proto.makeRequest = function makeRequest(requestOptions) {
    var url = this.serverApiUrl + "/" + this.apiVersion + requestOptions.path;

    if (requestOptions.queryParams) {
      url = url + "?" + querystring.stringify(snakecaseKeys(requestOptions.queryParams));
    } // FIXME remove 'any'


    var gotOptions = _extends({
      method: requestOptions.method,
      responseType: 'json',
      headers: {
        Authorization: "Bearer " + this.apiKey,
        'Content-type': contentType,
        'user-agent': userAgent
      }
    }, this.httpOptions);

    if (requestOptions.bodyParams) {
      gotOptions['form'] = snakecaseKeys(requestOptions.bodyParams);
    } // TODO improve error handling


    return got(url, gotOptions).then(function (data) {
      return deserialize(data.body);
    })["catch"](function (error) {
      return handleError(error);
    });
  };

  return RestClient;
}();

var AbstractApi = function AbstractApi(restClient) {
  this._restClient = restClient;
};

var ClientApi = /*#__PURE__*/function (_AbstractApi) {
  _inheritsLoose(ClientApi, _AbstractApi);

  function ClientApi() {
    return _AbstractApi.apply(this, arguments) || this;
  }

  var _proto = ClientApi.prototype;

  _proto.getClientList = /*#__PURE__*/function () {
    var _getClientList = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee() {
      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt("return", this._restClient.makeRequest({
                method: 'get',
                path: '/clients'
              }));

            case 1:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function getClientList() {
      return _getClientList.apply(this, arguments);
    }

    return getClientList;
  }();

  _proto.getClient = /*#__PURE__*/function () {
    var _getClient = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(clientId) {
      return runtime_1.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              return _context2.abrupt("return", this._restClient.makeRequest({
                method: 'get',
                path: "/clients/" + clientId
              }));

            case 1:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    function getClient(_x) {
      return _getClient.apply(this, arguments);
    }

    return getClient;
  }();

  _proto.verifyClient = function verifyClient(token) {
    return this._restClient.makeRequest({
      method: 'post',
      path: '/clients/verify',
      bodyParams: {
        token: token
      }
    });
  };

  return ClientApi;
}(AbstractApi);

var EmailApi = /*#__PURE__*/function (_AbstractApi) {
  _inheritsLoose(EmailApi, _AbstractApi);

  function EmailApi() {
    return _AbstractApi.apply(this, arguments) || this;
  }

  var _proto = EmailApi.prototype;

  _proto.createEmail = /*#__PURE__*/function () {
    var _createEmail = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(params) {
      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt("return", this._restClient.makeRequest({
                method: 'post',
                path: '/emails',
                bodyParams: params
              }));

            case 1:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function createEmail(_x) {
      return _createEmail.apply(this, arguments);
    }

    return createEmail;
  }();

  return EmailApi;
}(AbstractApi);

var SessionApi = /*#__PURE__*/function (_AbstractApi) {
  _inheritsLoose(SessionApi, _AbstractApi);

  function SessionApi() {
    return _AbstractApi.apply(this, arguments) || this;
  }

  var _proto = SessionApi.prototype;

  _proto.getSessionList = /*#__PURE__*/function () {
    var _getSessionList = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(queryParams) {
      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt("return", this._restClient.makeRequest({
                method: 'get',
                path: '/sessions',
                queryParams: queryParams
              }));

            case 1:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function getSessionList(_x) {
      return _getSessionList.apply(this, arguments);
    }

    return getSessionList;
  }();

  _proto.getSession = /*#__PURE__*/function () {
    var _getSession = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(sessionId) {
      return runtime_1.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              return _context2.abrupt("return", this._restClient.makeRequest({
                method: 'get',
                path: "/sessions/" + sessionId
              }));

            case 1:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    function getSession(_x2) {
      return _getSession.apply(this, arguments);
    }

    return getSession;
  }();

  _proto.revokeSession = /*#__PURE__*/function () {
    var _revokeSession = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(sessionId) {
      return runtime_1.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              return _context3.abrupt("return", this._restClient.makeRequest({
                method: 'post',
                path: "/sessions/" + sessionId + "/revoke"
              }));

            case 1:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this);
    }));

    function revokeSession(_x3) {
      return _revokeSession.apply(this, arguments);
    }

    return revokeSession;
  }();

  _proto.verifySession = /*#__PURE__*/function () {
    var _verifySession = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4(sessionId, token) {
      return runtime_1.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              return _context4.abrupt("return", this._restClient.makeRequest({
                method: 'post',
                path: "/sessions/" + sessionId + "/verify",
                bodyParams: {
                  token: token
                }
              }));

            case 1:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, this);
    }));

    function verifySession(_x4, _x5) {
      return _verifySession.apply(this, arguments);
    }

    return verifySession;
  }();

  return SessionApi;
}(AbstractApi);

var SMSMessageApi = /*#__PURE__*/function (_AbstractApi) {
  _inheritsLoose(SMSMessageApi, _AbstractApi);

  function SMSMessageApi() {
    return _AbstractApi.apply(this, arguments) || this;
  }

  var _proto = SMSMessageApi.prototype;

  _proto.createSMSMessage = /*#__PURE__*/function () {
    var _createSMSMessage = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(params) {
      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt("return", this._restClient.makeRequest({
                method: 'post',
                path: '/sms_messages',
                bodyParams: params
              }));

            case 1:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function createSMSMessage(_x) {
      return _createSMSMessage.apply(this, arguments);
    }

    return createSMSMessage;
  }();

  return SMSMessageApi;
}(AbstractApi);

var UserApi = /*#__PURE__*/function (_AbstractApi) {
  _inheritsLoose(UserApi, _AbstractApi);

  function UserApi() {
    return _AbstractApi.apply(this, arguments) || this;
  }

  var _proto = UserApi.prototype;

  _proto.getUserList = /*#__PURE__*/function () {
    var _getUserList = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(params) {
      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (params === void 0) {
                params = {};
              }

              return _context.abrupt("return", this._restClient.makeRequest({
                method: 'get',
                path: '/users',
                queryParams: params
              }));

            case 2:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function getUserList(_x) {
      return _getUserList.apply(this, arguments);
    }

    return getUserList;
  }();

  _proto.getUser = /*#__PURE__*/function () {
    var _getUser = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(userId) {
      return runtime_1.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              return _context2.abrupt("return", this._restClient.makeRequest({
                method: 'get',
                path: "/users/" + userId
              }));

            case 1:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    function getUser(_x2) {
      return _getUser.apply(this, arguments);
    }

    return getUser;
  }();

  _proto.updateUser = /*#__PURE__*/function () {
    var _updateUser = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(userId, params) {
      return runtime_1.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              if (params === void 0) {
                params = {};
              }

              // The Clerk server API requires metadata fields to be stringified
              if (params.publicMetadata && !(typeof params.publicMetadata == 'string')) {
                params.publicMetadata = JSON.stringify(params.publicMetadata);
              }

              if (params.privateMetadata && !(typeof params.privateMetadata == 'string')) {
                params.privateMetadata = JSON.stringify(params.privateMetadata);
              }

              return _context3.abrupt("return", this._restClient.makeRequest({
                method: 'patch',
                path: "/users/" + userId,
                bodyParams: params
              }));

            case 4:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this);
    }));

    function updateUser(_x3, _x4) {
      return _updateUser.apply(this, arguments);
    }

    return updateUser;
  }();

  _proto.deleteUser = /*#__PURE__*/function () {
    var _deleteUser = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4(userId) {
      return runtime_1.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              return _context4.abrupt("return", this._restClient.makeRequest({
                method: 'delete',
                path: "/users/" + userId
              }));

            case 1:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, this);
    }));

    function deleteUser(_x5) {
      return _deleteUser.apply(this, arguments);
    }

    return deleteUser;
  }();

  return UserApi;
}(AbstractApi);

var defaultApiKey = process.env.CLERK_API_KEY || '';
var defaultApiVersion = process.env.CLERK_API_VERSION || 'v1';
var defaultServerApiUrl = process.env.CLERK_API_URL || 'https://api.clerk.dev';

var Clerk = /*#__PURE__*/function () {
  function Clerk(_temp) {
    var _ref = _temp === void 0 ? {} : _temp,
        _ref$apiKey = _ref.apiKey,
        apiKey = _ref$apiKey === void 0 ? defaultApiKey : _ref$apiKey,
        _ref$serverApiUrl = _ref.serverApiUrl,
        serverApiUrl = _ref$serverApiUrl === void 0 ? defaultServerApiUrl : _ref$serverApiUrl,
        _ref$apiVersion = _ref.apiVersion,
        apiVersion = _ref$apiVersion === void 0 ? defaultApiVersion : _ref$apiVersion,
        _ref$httpOptions = _ref.httpOptions,
        httpOptions = _ref$httpOptions === void 0 ? {} : _ref$httpOptions;

    this._restClient = new RestClient(apiKey, serverApiUrl, apiVersion, httpOptions);
  } // For use as singleton, always returns the same instance


  Clerk.getInstance = function getInstance() {
    if (!this._instance) {
      this._instance = new Clerk();
    }

    return this._instance;
  } // Setters for the embedded rest client
  ;

  var _proto = Clerk.prototype;

  // Middlewares
  // defaultOnError swallows the error
  _proto.defaultOnError = function defaultOnError(error) {
    Logger.warn(error.message);
    (error.data || []).forEach(function (serverError) {
      Logger.warn(serverError.longMessage);
    });
  } // strictOnError returns the error so that Express will halt the request chain
  ;

  _proto.strictOnError = function strictOnError(error) {
    Logger.error(error.message);
    (error.data || []).forEach(function (serverError) {
      Logger.error(serverError.longMessage);
    });
    return error;
  };

  _proto.expressWithSession = function expressWithSession(_temp2) {
    var _ref2 = _temp2 === void 0 ? {
      onError: this.defaultOnError
    } : _temp2,
        onError = _ref2.onError;

    function authenticate(_x, _x2, _x3) {
      return _authenticate.apply(this, arguments);
    }

    function _authenticate() {
      _authenticate = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(req, res, next) {
        var cookies, sessionToken, sessionId, session, _session, client, err;

        return runtime_1.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                cookies = new Cookies(req, res);
                _context.prev = 1;
                sessionToken = cookies.get('__session');
                Logger.debug("sessionToken: " + sessionToken);

                if (sessionToken) {
                  _context.next = 6;
                  break;
                }

                throw new HttpError(401, 'No session cookie found', undefined);

              case 6:
                sessionId = req.query._clerk_session_id;
                Logger.debug("sessionId from query: " + sessionId);
                session = undefined;

                if (sessionId) {
                  _context.next = 17;
                  break;
                }

                _context.next = 12;
                return this.clients.verifyClient(sessionToken);

              case 12:
                client = _context.sent;
                session = client.sessions.find(function (session) {
                  return session.id === client.lastActiveSessionId;
                });
                Logger.debug("active session from client " + client.id + ": " + ((_session = session) == null ? void 0 : _session.id));
                _context.next = 21;
                break;

              case 17:
                _context.next = 19;
                return this.sessions.verifySession(sessionId, sessionToken);

              case 19:
                session = _context.sent;
                Logger.debug("active session from session id " + sessionId + ": " + session);

              case 21:
                // Set Clerk session on request
                // TBD Set on state / locals instead?
                // @ts-ignore
                req.session = session;
                next();
                _context.next = 33;
                break;

              case 25:
                _context.prev = 25;
                _context.t0 = _context["catch"](1);

                if (onError) {
                  _context.next = 29;
                  break;
                }

                return _context.abrupt("return", next());

              case 29:
                _context.next = 31;
                return onError(_context.t0);

              case 31:
                err = _context.sent;

                if (err) {
                  next(err);
                } else {
                  next();
                }

              case 33:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this, [[1, 25]]);
      }));
      return _authenticate.apply(this, arguments);
    }

    return authenticate.bind(this);
  };

  _proto.expressRequireSession = function expressRequireSession(_temp3) {
    var _ref3 = _temp3 === void 0 ? {
      onError: this.strictOnError
    } : _temp3,
        onError = _ref3.onError;

    return this.expressWithSession({
      onError: onError
    });
  } // Credits to https://nextjs.org/docs/api-routes/api-middlewares
  // Helper method to wait for a middleware to execute before continuing
  // And to throw an error when an error happens in a middleware
  // @ts-ignore
  ;

  _proto._runMiddleware = function _runMiddleware(req, res, fn) {
    return new Promise(function (resolve, reject) {
      // @ts-ignore
      fn(req, res, function (result) {
        if (result instanceof Error) {
          return reject(result);
        }

        return resolve(result);
      });
    });
  } // Set the session on the request and then call provided handler
  ;

  _proto.withSession = function withSession(handler, _temp4) {
    var _this = this;

    var _ref4 = _temp4 === void 0 ? {
      onError: this.defaultOnError
    } : _temp4,
        onError = _ref4.onError;

    return /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(req, res) {
        return runtime_1.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.prev = 0;
                _context2.next = 3;
                return _this._runMiddleware(req, res, _this.expressWithSession({
                  onError: onError
                }));

              case 3:
                return _context2.abrupt("return", handler(req, res));

              case 6:
                _context2.prev = 6;
                _context2.t0 = _context2["catch"](0);
                res.statusCode = _context2.t0.statusCode || 401;
                res.json(_context2.t0.data || {
                  error: _context2.t0.message
                });
                res.end();

              case 11:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, null, [[0, 6]]);
      }));

      return function (_x4, _x5) {
        return _ref5.apply(this, arguments);
      };
    }();
  } // Stricter version, short-circuits if session can't be determined
  ;

  _proto.requireSession = function requireSession(handler, _temp5) {
    var _ref6 = _temp5 === void 0 ? {
      onError: this.strictOnError
    } : _temp5,
        onError = _ref6.onError;

    return this.withSession(handler, {
      onError: onError
    });
  };

  _createClass(Clerk, [{
    key: "apiKey",
    set: function set(value) {
      this._restClient.apiKey = value;
    }
  }, {
    key: "serverApiUrl",
    set: function set(value) {
      this._restClient.serverApiUrl = value;
    }
  }, {
    key: "apiVersion",
    set: function set(value) {
      this._restClient.apiVersion = value;
    }
  }, {
    key: "httpOptions",
    set: function set(value) {
      this._restClient.httpOptions = value;
    } // Lazy sub-api getters

  }, {
    key: "clients",
    get: function get() {
      if (!this._clientApi) {
        this._clientApi = new ClientApi(this._restClient);
      }

      return this._clientApi;
    }
  }, {
    key: "emails",
    get: function get() {
      if (!this._emailApi) {
        this._emailApi = new EmailApi(this._restClient);
      }

      return this._emailApi;
    }
  }, {
    key: "sessions",
    get: function get() {
      if (!this._sessionApi) {
        this._sessionApi = new SessionApi(this._restClient);
      }

      return this._sessionApi;
    }
  }, {
    key: "smsMessages",
    get: function get() {
      if (!this._smsMessageApi) {
        this._smsMessageApi = new SMSMessageApi(this._restClient);
      }

      return this._smsMessageApi;
    }
  }, {
    key: "users",
    get: function get() {
      if (!this._userApi) {
        this._userApi = new UserApi(this._restClient);
      }

      return this._userApi;
    }
  }]);

  return Clerk;
}();

var singletonInstance = /*#__PURE__*/Clerk.getInstance();
var clients = singletonInstance.clients;
var emails = singletonInstance.emails;
var sessions = singletonInstance.sessions;
var smsMessages = singletonInstance.smsMessages;
var users = singletonInstance.users; // Export a default singleton instance that should suffice for most use cases

var ClerkExpressWithSession = /*#__PURE__*/singletonInstance.expressWithSession.bind(singletonInstance);
var ClerkExpressRequireSession = /*#__PURE__*/singletonInstance.expressRequireSession.bind(singletonInstance);
var withSession = /*#__PURE__*/singletonInstance.withSession.bind(singletonInstance);
var requireSession = /*#__PURE__*/singletonInstance.requireSession.bind(singletonInstance);
// Useful if you only have access to a sub-api instance

function setClerkApiKey(value) {
  Clerk.getInstance().apiKey = value;
}
function setClerkServerApiUrl(value) {
  Clerk.getInstance().serverApiUrl = value;
}
function setClerkApiVersion(value) {
  Clerk.getInstance().apiVersion = value;
}
function setClerkHttpOptions(value) {
  Clerk.getInstance().httpOptions = value;
}

exports.Clerk = Clerk;
exports.ClerkExpressRequireSession = ClerkExpressRequireSession;
exports.ClerkExpressWithSession = ClerkExpressWithSession;
exports.ClerkServerError = ClerkServerError;
exports.Client = Client;
exports.Email = Email;
exports.EmailAddress = EmailAddress;
exports.ExternalAccount = ExternalAccount;
exports.HttpError = HttpError;
exports.IdentificationLink = IdentificationLink;
exports.Logger = Logger;
exports.PhoneNumber = PhoneNumber;
exports.SMSMessage = SMSMessage;
exports.Session = Session;
exports.User = User;
exports.Verification = Verification;
exports.clients = clients;
exports.default = singletonInstance;
exports.emails = emails;
exports.requireSession = requireSession;
exports.sessions = sessions;
exports.setClerkApiKey = setClerkApiKey;
exports.setClerkApiVersion = setClerkApiVersion;
exports.setClerkHttpOptions = setClerkHttpOptions;
exports.setClerkServerApiUrl = setClerkServerApiUrl;
exports.smsMessages = smsMessages;
exports.users = users;
exports.withSession = withSession;
//# sourceMappingURL=clerk-sdk-node.cjs.development.js.map
