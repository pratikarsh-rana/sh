/// <reference types="qs" />
import type { Request, Response, NextFunction } from 'express';
import type { NextApiRequest, NextApiResponse } from 'next';
import { ClientApi } from './apis/ClientApi';
import { EmailApi } from './apis/EmailApi';
import { SessionApi } from './apis/SessionApi';
import { SMSMessageApi } from './apis/SMSMessageApi';
import { UserApi } from './apis/UserApi';
import { Session } from './resources/Session';
export declare type MiddlewareOptions = {
    onError?: Function;
};
export declare type WithSessionProp<T> = T & {
    session?: Session;
};
export declare type RequireSessionProp<T> = T & {
    session: Session;
};
export default class Clerk {
    private _restClient;
    static _instance: Clerk;
    private _clientApi?;
    private _emailApi?;
    private _sessionApi?;
    private _smsMessageApi?;
    private _userApi?;
    constructor({ apiKey, serverApiUrl, apiVersion, httpOptions, }?: {
        apiKey?: string;
        serverApiUrl?: string;
        apiVersion?: string;
        httpOptions?: object;
    });
    static getInstance(): Clerk;
    set apiKey(value: string);
    set serverApiUrl(value: string);
    set apiVersion(value: string);
    set httpOptions(value: object);
    get clients(): ClientApi;
    get emails(): EmailApi;
    get sessions(): SessionApi;
    get smsMessages(): SMSMessageApi;
    get users(): UserApi;
    defaultOnError(error: Error & {
        data: any;
    }): void;
    strictOnError(error: Error & {
        data: any;
    }): Error & {
        data: any;
    };
    expressWithSession({ onError }?: MiddlewareOptions): (req: Request, res: Response, next: NextFunction) => Promise<void>;
    expressRequireSession({ onError }?: MiddlewareOptions): (req: Request<import("express-serve-static-core").ParamsDictionary, any, any, import("qs").ParsedQs, Record<string, any>>, res: Response<any, Record<string, any>>, next: NextFunction) => Promise<void>;
    private _runMiddleware;
    withSession(handler: Function, { onError }?: MiddlewareOptions): (req: WithSessionProp<NextApiRequest>, res: NextApiResponse) => Promise<any>;
    requireSession(handler: Function, { onError }?: MiddlewareOptions): (req: WithSessionProp<NextApiRequest>, res: NextApiResponse<any>) => Promise<any>;
}
